我的项目经验并不少，但是从事面向最终用户的应用程序开发却是进入华屹以后首次参与，充其量也只算参与了半个项目。下面是我的一些肤浅的理解。
一．由于之前学习和工作经验的缘故，一直觉得好的软件是靠好的设计的，但是在公司的工作让我慢慢的意识到其实好的软件是靠培养的，而不是设计的。之前有一段时间，软件bug特别多，我心里想只要设计好，bug会慢慢的减少的。现在我想只要工作方法是正确的，态度是正确的，bug就会慢慢减少。其实当时有同事说过怎么不让Eric.Li设计下，我现在想告诉他（她），好的软件是靠培养的，不是设计的。

二．瀑布模式的缺陷在于项目进展情况的反馈。根本原因在于它的两个谬论，第一，假定需求可以一开始就确定的，需求是不会大变化的。第二，过度的依赖好的设计，认为一开始就能设计出一个固定的软件架构。事实上正确可靠的需求依赖于团队对领域知识的消化，对领域模型不断的优化，随着领域模型的优化，我们的软件实用性和易用性也越来越好，也由于领域模型的不断优化，我们的软件也跟着进行不断的微小重构，突然有一天我们对领域知识的理解有了突破，我们的领域模型也彻底变样，代码必须有大的重构，这样软件的实用性等方面将得到一个突破，上周Vincent关于load plan的一个非正式建模是个很成功的例子。承认需求的变化，“与时俱进，实事求是”是敏捷在哲学上的突破。以前看过一些比较牛的代码，于是很崇拜架构师，但最近看一本大师的书的时候他说“即使是最优秀的架构师，好的设计好的想法往往是在他完成了你的第一个设计之后才出现的”，于是顿悟，原来大师也没有我想象的那么神，其实这句话我早有体会，但一直以为只是自己水平太搓。

三．关于文档和UML，瀑布模式中的需求分析和设计都成了谬论，那么稳定完整永远正确的文档也就成了扯淡。于是敏捷开发中摈弃了这种文档，提出清晰的代码就是文档的观念。但事实上清晰的代码不是那么容易的事情，即使能做到也容易使人淹没在代码的细枝末节中。敏捷也是离不开UML和文档的，只是敏捷中的文档不再是为了文档，而是为了交流和理解，MUL也不再是详尽的编程指导，而是为了交流的领域模型草图。我曾经做过媒体资源分配算法的优化，和媒体端口分配的重构，但是领导给我六个星期的时间，我只要了两个星期的时间（其实我脑子里已经想过一个多月了），用了三天的时间写文档，一天半的时间写代码，一天的时间测试，第二个星期就等着测试的人测试，结果很顺利没有bug。从那时起，我明白了其实写文档是能加快开发速度和软件正确性的。

四．关于需求变更，敏捷的根本性优势就是能很好的适应需求的变更，最真实最贴切的反应需求，这是降低项目风险，开发易用性软件等的基础。敏捷对需求变更采取积极，拥抱的太多。但是我觉得这只是对不可避免出现的变更采取的一种正确的态度而已。这不等于敏捷希望需求变更，希望需求任意的变更。事实上敏捷早期的迭代中更多的精力还是放在需求上，也是希望尽早的能明确大多数的需求。敏捷可以很快的从代码中反馈设计是否合理，然后及时调整设计，反对一开始就设计的过于完整（这样就等于小瀑布模型了），但这不等于设计人员（PO）没有经过比较合理的思考随性地想到什么就做什么，凡事都有个度。

五．关于估点问题，个人觉得有扯淡的地方。User story中的story是故事的意思，也就是要以前发生过的，有相关的案例你才能估算的。再者，敏捷本来承认需求是变动的，那么工作量也自然是变动的，岂能估计的准呢，当然有人觉得可以通过加点来调整，这就仁者见仁智者见智了。

六．我个人的性格就喜欢简单，第一次听到软件设计大道至简，第一次听到kiss原则的时候我都觉得很开心，觉得自己天性适合做软件的。事实上我在公司做了那么久，我觉得我们的软件界面，软件功能有时候还是违背了这一原则的。同时我们的开发过程其实也是有违背敏捷精神的，敏捷是通过不断的重构来调整软件适应新的需求变更，做成优秀软件，而我们大多数时候是通过堆积木的方式堆积我们的代码完成功能的叠加。当然我们的软件很小，没有复杂的需求和复杂的软件设计，我们有些做的不够合理的地方也很难体现出来。